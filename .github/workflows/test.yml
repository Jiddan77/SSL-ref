name: SSL Referee Analysis Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports and basic functionality
      run: |
        python -c "import ssl_production_scraper; print('✅ Production scraper imports OK')"
        python -c "import referee_bias_analyzer; print('✅ Bias analyzer imports OK')"
        python -c "from ssl_production_scraper import SSLProductionScraper; print('✅ Classes import OK')"
    
    - name: Check code structure
      run: |
        python -c "
        import ast
        import sys
        
        def check_file(filename):
            try:
                with open(filename, 'r') as f:
                    ast.parse(f.read())
                print(f'✅ {filename} syntax OK')
                return True
            except SyntaxError as e:
                print(f'❌ {filename} syntax error: {e}')
                return False
        
        files = ['ssl_production_scraper.py', 'referee_bias_analyzer.py', 'ssl_smart_scraper.py', 'setup.py']
        all_good = all(check_file(f) for f in files)
        sys.exit(0 if all_good else 1)
        "